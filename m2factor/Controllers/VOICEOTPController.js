/**
  *M2Factor
  *
  * This file was automatically generated for 2Factor by APIMATIC BETA v2.0 on 02/18/2016
  */

'use strict';
angular.module('M2Factor').factory('VOICEOTPController',function($q,Configuration,HttpClient,APIHelper){
    return{
        /**
         * This endpoint is used to check VOICE OTP balance
         * @param {string} apiKey    Required parameter: Check VOICE OTP Balance
         *
         * @return {promise<CheckVoiceBalanceModel>}
         */
        getCheckVoiceBalance : function(apiKey){
            //Assign default values
            apiKey = apiKey || "Get one from http://2Factor.in";

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/API/V1/{api_key}/BAL/VOICE";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "api_key" : apiKey
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json"
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * This endpoint is used to send Auto Generated VOICE OTP to India
         * @param {string} apiKey    Required parameter: API Obtained From 2Factor.in
         * @param {string} phoneNumber    Required parameter: 10 Digit Indian Phone Number
         *
         * @return {promise<SendingVoiceOtpAutoGeneratedOtpModel>}
         */
        getSendingVOICEOTPAutoGeneratedOTP : function(apiKey, phoneNumber){
            //Assign default values
            apiKey = apiKey || "Get one from http://2Factor.in";
            phoneNumber = phoneNumber || "9911991199";

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/API/V1/{api_key}/VOICE/{phone_number}/AUTOGEN";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "api_key" : apiKey,
                "phone_number" : phoneNumber
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json"
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * This endpoint is used to send VOICE OTP to India
         * @param {string} apiKey    Required parameter: API Obtained From 2Factor.in
         * @param {int} otp    Required parameter: 4 Digit ( Numeric ) OTP code to be sent
         * @param {string} phoneNumber    Required parameter: 10 Digit Indian Phone Number
         *
         * @return {promise<SendingVoiceOtpModel>}
         */
        getSendingVoiceOTPCustomOTP : function(apiKey, otp, phoneNumber){
            //Assign default values
            apiKey = apiKey || "Get one from http://2Factor.in";
            otp = otp || 4499;
            phoneNumber = phoneNumber || "9911991199";

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/API/V1/{api_key}/VOICE/{phone_number}/{otp}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "api_key" : apiKey,
                "otp" : otp,
                "phone_number" : phoneNumber
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json"
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * This endpoint is useful in verifying user entered OTP with sent OTP
         * @param {string} apiKey    Required parameter: API Obtained From 2Factor.in
         * @param {string} otpInput    Required parameter: OTP Value input by end user
         * @param {string} sessionId    Required parameter: Verification session id returned in send OTP step
         *
         * @return {promise<VerifyVoiceOtpInputModel>}
         */
        getVerifyVOICEOTPInput : function(apiKey, otpInput, sessionId){
            //Assign default values
            apiKey = apiKey || "Get one from http://2Factor.in";
            otpInput = otpInput || "1234";
            sessionId = sessionId || "4a4b52d9-be3e-4f2c-b66e-f4141091b876";

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/API/V1/{api_key}/VOICE/VERIFY/{session_id}/{otp_input}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "api_key" : apiKey,
                "otp_input" : otpInput,
                "session_id" : sessionId
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json"
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        }
    }
});